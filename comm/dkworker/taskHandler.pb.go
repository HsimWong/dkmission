// Code generated by protoc-gen-go. DO NOT EDIT.
// source: taskHandler.proto

/*
Package dkworker is a generated protocol buffer package.

It is generated from these files:
	taskHandler.proto

It has these top-level messages:
	Task
	GrayScaleImage
	GrayScaleRow
	TaskPushingReply
	Needle
	NeedleReply
*/
package dkworker

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Task struct {
	ImageData  *GrayScaleImage `protobuf:"bytes,1,opt,name=imageData" json:"imageData,omitempty"`
	SubTaskID  string          `protobuf:"bytes,2,opt,name=subTaskID" json:"subTaskID,omitempty"`
	MainTaskID string          `protobuf:"bytes,3,opt,name=mainTaskID" json:"mainTaskID,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Task) GetImageData() *GrayScaleImage {
	if m != nil {
		return m.ImageData
	}
	return nil
}

func (m *Task) GetSubTaskID() string {
	if m != nil {
		return m.SubTaskID
	}
	return ""
}

func (m *Task) GetMainTaskID() string {
	if m != nil {
		return m.MainTaskID
	}
	return ""
}

type GrayScaleImage struct {
	GrayScaleRow []*GrayScaleRow `protobuf:"bytes,1,rep,name=grayScaleRow" json:"grayScaleRow,omitempty"`
}

func (m *GrayScaleImage) Reset()                    { *m = GrayScaleImage{} }
func (m *GrayScaleImage) String() string            { return proto.CompactTextString(m) }
func (*GrayScaleImage) ProtoMessage()               {}
func (*GrayScaleImage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GrayScaleImage) GetGrayScaleRow() []*GrayScaleRow {
	if m != nil {
		return m.GrayScaleRow
	}
	return nil
}

type GrayScaleRow struct {
	RowPixels []uint32 `protobuf:"varint,1,rep,packed,name=rowPixels" json:"rowPixels,omitempty"`
}

func (m *GrayScaleRow) Reset()                    { *m = GrayScaleRow{} }
func (m *GrayScaleRow) String() string            { return proto.CompactTextString(m) }
func (*GrayScaleRow) ProtoMessage()               {}
func (*GrayScaleRow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GrayScaleRow) GetRowPixels() []uint32 {
	if m != nil {
		return m.RowPixels
	}
	return nil
}

type TaskPushingReply struct {
	TaskPushingReplyContent string `protobuf:"bytes,1,opt,name=TaskPushingReplyContent,json=taskPushingReplyContent" json:"TaskPushingReplyContent,omitempty"`
}

func (m *TaskPushingReply) Reset()                    { *m = TaskPushingReply{} }
func (m *TaskPushingReply) String() string            { return proto.CompactTextString(m) }
func (*TaskPushingReply) ProtoMessage()               {}
func (*TaskPushingReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TaskPushingReply) GetTaskPushingReplyContent() string {
	if m != nil {
		return m.TaskPushingReplyContent
	}
	return ""
}

type Needle struct {
	NeedleValue int64 `protobuf:"varint,1,opt,name=NeedleValue,json=needleValue" json:"NeedleValue,omitempty"`
}

func (m *Needle) Reset()                    { *m = Needle{} }
func (m *Needle) String() string            { return proto.CompactTextString(m) }
func (*Needle) ProtoMessage()               {}
func (*Needle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Needle) GetNeedleValue() int64 {
	if m != nil {
		return m.NeedleValue
	}
	return 0
}

type NeedleReply struct {
	NegNeedleVal int64 `protobuf:"varint,1,opt,name=negNeedleVal" json:"negNeedleVal,omitempty"`
}

func (m *NeedleReply) Reset()                    { *m = NeedleReply{} }
func (m *NeedleReply) String() string            { return proto.CompactTextString(m) }
func (*NeedleReply) ProtoMessage()               {}
func (*NeedleReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NeedleReply) GetNegNeedleVal() int64 {
	if m != nil {
		return m.NegNeedleVal
	}
	return 0
}

func init() {
	proto.RegisterType((*Task)(nil), "dkworker.Task")
	proto.RegisterType((*GrayScaleImage)(nil), "dkworker.GrayScaleImage")
	proto.RegisterType((*GrayScaleRow)(nil), "dkworker.GrayScaleRow")
	proto.RegisterType((*TaskPushingReply)(nil), "dkworker.TaskPushingReply")
	proto.RegisterType((*Needle)(nil), "dkworker.Needle")
	proto.RegisterType((*NeedleReply)(nil), "dkworker.NeedleReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TaskHandle service

type TaskHandleClient interface {
	StatusTest(ctx context.Context, in *Needle, opts ...grpc.CallOption) (*NeedleReply, error)
	PushTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*TaskPushingReply, error)
}

type taskHandleClient struct {
	cc *grpc.ClientConn
}

func NewTaskHandleClient(cc *grpc.ClientConn) TaskHandleClient {
	return &taskHandleClient{cc}
}

func (c *taskHandleClient) StatusTest(ctx context.Context, in *Needle, opts ...grpc.CallOption) (*NeedleReply, error) {
	out := new(NeedleReply)
	err := grpc.Invoke(ctx, "/dkworker.TaskHandle/StatusTest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskHandleClient) PushTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*TaskPushingReply, error) {
	out := new(TaskPushingReply)
	err := grpc.Invoke(ctx, "/dkworker.TaskHandle/PushTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskHandle service

type TaskHandleServer interface {
	StatusTest(context.Context, *Needle) (*NeedleReply, error)
	PushTask(context.Context, *Task) (*TaskPushingReply, error)
}

func RegisterTaskHandleServer(s *grpc.Server, srv TaskHandleServer) {
	s.RegisterService(&_TaskHandle_serviceDesc, srv)
}

func _TaskHandle_StatusTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Needle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHandleServer).StatusTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkworker.TaskHandle/StatusTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHandleServer).StatusTest(ctx, req.(*Needle))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskHandle_PushTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskHandleServer).PushTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkworker.TaskHandle/PushTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskHandleServer).PushTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskHandle_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dkworker.TaskHandle",
	HandlerType: (*TaskHandleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StatusTest",
			Handler:    _TaskHandle_StatusTest_Handler,
		},
		{
			MethodName: "PushTask",
			Handler:    _TaskHandle_PushTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "taskHandler.proto",
}

func init() { proto.RegisterFile("taskHandler.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x5f, 0x6b, 0xc2, 0x30,
	0x14, 0xc5, 0xed, 0x1c, 0x62, 0x6f, 0x9d, 0xb8, 0xc0, 0x66, 0x91, 0x31, 0x4a, 0x9e, 0x64, 0x0c,
	0x61, 0x0e, 0x36, 0xd9, 0xeb, 0x84, 0x4d, 0x90, 0x21, 0x51, 0xf6, 0x1e, 0xe7, 0xa5, 0x2b, 0xad,
	0x89, 0x34, 0x29, 0x9d, 0x30, 0xd8, 0x57, 0x1f, 0x8d, 0x7f, 0x62, 0xc5, 0xb7, 0xe6, 0x77, 0xce,
	0xb9, 0x39, 0x4d, 0x02, 0x97, 0x9a, 0xab, 0xf8, 0x9d, 0x8b, 0x45, 0x82, 0x69, 0x6f, 0x95, 0x4a,
	0x2d, 0x49, 0x7d, 0x11, 0xe7, 0x32, 0x8d, 0x31, 0xa5, 0xbf, 0x70, 0x3e, 0xe3, 0x2a, 0x26, 0x4f,
	0xe0, 0x46, 0x4b, 0x1e, 0xe2, 0x90, 0x6b, 0xee, 0x3b, 0x81, 0xd3, 0xf5, 0xfa, 0x7e, 0x6f, 0xe7,
	0xea, 0xbd, 0xa5, 0x7c, 0x3d, 0xfd, 0xe2, 0x09, 0x8e, 0x0a, 0x0f, 0xb3, 0x56, 0x72, 0x03, 0xae,
	0xca, 0xe6, 0xc5, 0x88, 0xd1, 0xd0, 0x3f, 0x0b, 0x9c, 0xae, 0xcb, 0x2c, 0x20, 0xb7, 0x00, 0x4b,
	0x1e, 0x89, 0xad, 0x5c, 0x35, 0xf2, 0x01, 0xa1, 0x63, 0x68, 0x96, 0x47, 0x93, 0x17, 0x68, 0x84,
	0x3b, 0xc2, 0x64, 0xee, 0x3b, 0x41, 0xb5, 0xeb, 0xf5, 0xaf, 0x4f, 0x54, 0x61, 0x32, 0x67, 0x25,
	0x2f, 0xbd, 0x87, 0xc6, 0xa1, 0x5a, 0x74, 0x4b, 0x65, 0x3e, 0x89, 0x7e, 0x30, 0x51, 0x66, 0xd0,
	0x05, 0xb3, 0x80, 0x8e, 0xa1, 0x55, 0xb4, 0x98, 0x64, 0xea, 0x3b, 0x12, 0x21, 0xc3, 0x55, 0xb2,
	0x26, 0x03, 0x68, 0x1f, 0xb3, 0x57, 0x29, 0x34, 0x0a, 0x6d, 0xce, 0xc4, 0x65, 0x6d, 0x7d, 0x5a,
	0xa6, 0x77, 0x50, 0xfb, 0x40, 0x5c, 0x24, 0x48, 0x02, 0xf0, 0x36, 0x5f, 0x9f, 0x3c, 0xc9, 0xd0,
	0xe4, 0xaa, 0xcc, 0x13, 0x16, 0xd1, 0x87, 0x9d, 0x63, 0xb3, 0x29, 0x85, 0x86, 0xc0, 0x70, 0x9f,
	0xd9, 0x26, 0x4a, 0xac, 0xff, 0x07, 0x30, 0xdb, 0xdf, 0x22, 0x79, 0x06, 0x98, 0x6a, 0xae, 0x33,
	0x35, 0x43, 0xa5, 0x49, 0xcb, 0x1e, 0xce, 0x26, 0xd0, 0xb9, 0x3a, 0x26, 0x66, 0x23, 0x5a, 0x21,
	0x03, 0xa8, 0x17, 0xe5, 0xcd, 0x8d, 0x37, 0xad, 0xa9, 0x58, 0x77, 0x3a, 0xe5, 0xf5, 0xe1, 0x4f,
	0xd2, 0xca, 0xbc, 0x66, 0x1e, 0xce, 0xe3, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb3, 0xd0, 0x41,
	0xf7, 0x4d, 0x02, 0x00, 0x00,
}
